require 'open-uri'

puts <<~EO_USAGE
  # DON'T MODIFY
  # generated by
  # rails runner lib/seed_generator.rb > db/seeds.rb
EO_USAGE

Product::BUSINESS_SIZES.each do |business|
  tag_b = ActsAsTaggableOn::Tag.find_by(name: business)
  ActsAsTaggableOn::Tag.create!(name: business) if tag_b.nil?
end

users = [
  { email: "sarah@gmail.com", password: "password" },
  { email: "bob@gmail.com", password: "azerty" },
  { email: "yan@gmail.com", password: "password" }
]

users.each do |el|
  user = User.new(
      :email                 => el[:email],
      :password              => el[:password],
      :password_confirmation => el[:password]
    )
  user.save
      puts format(
      <<~EO_PRODUCT_CREATE,
        user = User.find_by(%<find_args>s)
        user = User.create!(%<create_args>s) if user.nil?
        user.update!(%<update_args>s)
        user = nil
      EO_PRODUCT_CREATE
      find_args: {email: el[:email]},
      create_args: {email: el[:email],password: el[:password],password_confirmation: el[:password]},
      update_args: {}
    )
end

categories = [
  "bookkeeping",
  "user experience",
  "developer tools",
  "marketing",
  "CRM",
  "design tools",
  "productivity",
  "analytics"
]

categories.each do |category|
  puts format(
    <<~EO_PRODUCT_CREATE,
      tag = ActsAsTaggableOn::Tag.find_by(name: "%<category>s")
      ActsAsTaggableOn::Tag.create!(name: "%<category>s") if tag.nil?
    EO_PRODUCT_CREATE
    category: category
  )
end

categories.each do |category|
  html_file = URI.open("https://www.producthunt.com/search?q=#{category.gsub(/\s/, '%20')}").read
  html_doc = Nokogiri::HTML(html_file)
  html_doc.search(".styles_item__2kQQ5").each do |product|
    name = product.search(".styles_content__3rHRc a").children.first.text
    bio = product.search(".styles_grey__3J1TQ").children.first.text
    link = product.search(".styles_content__3rHRc a").attribute('href').value
    product_page = URI.open("https://www.producthunt.com#{link}").read
    product_doc = Nokogiri::HTML(product_page)
    info = product_doc.search(".styles_main__48OVQ p").children.text
    path = product_doc.search(".styles_headerInfo__3h0jF h1 a").attribute('href').value
    begin
      URI.open("https://www.producthunt.com#{path}")
    rescue OpenURI::HTTPError, Errno::EHOSTUNREACH, Net::OpenTimeout, Errno::ECONNREFUSED
      next
    rescue RuntimeError => e
      if />.*[?]/.match(e.message)
        url = />.*[?]/.match(e.message).to_s.chars[2...-1].join
      else
        url = />.*/.match(e.message).to_s.chars[2..].join
      end
    end
    url = "https://www.producthunt.com#{path}" if url.nil?
    product = Product.find_by(name: name, url: url)
    product = Product.create!(name: name, url: url) if product.nil?
    product.update!(bio: bio, info: info)
    product.category_list.add(category)
    product.save!
    puts format(
      <<~EO_PRODUCT_CREATE,
        product = Product.find_by(%<find_args>s)
        product = Product.create!(%<create_args>s) if product.nil?
        product.update!(%<update_args>s)
        product.category_list.add("%<categories>s", parse: true)
        product.save!
        product = nil
      EO_PRODUCT_CREATE
      find_args: {name: name, url: url},
      create_args: {name: name, url: url},
      update_args: {bio: bio, info: info},
      categories: [category].join(", ")
    )
  rescue ActiveRecord::RecordInvalid => e
    puts e, "could not save that product, moving on"
    puts "for:", name, url
  end
end

## NEED TO SORT THIS OUT

#   lists = [
#     { name: "Bookkeeping Solutions", description: "Looking for free and low cost book keeping solutions for my cafe" },
#     { name: "Marketing Solutions", description: "Looking for free and low cost marketing keeping solutions for my cafe" },
#   ]

#   lists.each do |list|
#     list = List.new(
#         :name                => list[:name,
#         :password            => list[:description],
#       )
#     list.save
#   end

#   #have list id_1 id_2

#   solutions = [
#     {list_id: 1,  product_id:
#       products_samples = [(Product.tagged_by("bookkeeping").sample(10)]

#       product_samples.each do |product|
#         product.product_id
#       end


#     },
#     {list_id: 2,  product_id: sample(Product.tagged_by("marketing")},
# }
